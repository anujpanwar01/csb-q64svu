{"version":3,"sources":["components/Movie.js","components/MoviesList.js","components/AddMovie.js","App.js","index.js","components/AddMovie.module.css","components/Movie.module.css","components/MoviesList.module.css"],"names":["Movie","props","className","classes","movie","title","releaseDate","openingText","MovieList","movies","map","release","id","AddMovie","titleRef","useRef","openingTextRef","releaseDateRef","onSubmit","event","preventDefault","current","value","onAddMovie","control","htmlFor","type","ref","rows","App","useState","setMovies","isLoading","setIsLoading","error","setError","newMovie","setNewMovie","fetchMoviesHandler","useCallback","fetch","response","ok","Error","json","key","data","loadedData","push","console","log","message","method","body","JSON","stringify","res","useEffect","content","length","MoviesList","Fragment","onClick","ReactDOM","createRoot","document","getElementById","render","module","exports"],"mappings":"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","file":"static/js/main.5139af75.chunk.js","sourcesContent":["import React from 'react';\n\nimport classes from './Movie.module.css';\n\nconst Movie = (props) => {\n  return (\n    <li className={classes.movie}>\n      <h2>{props.title}</h2>\n      <h3>{props.releaseDate}</h3>\n      <p>{props.openingText}</p>\n    </li>\n  );\n};\n\nexport default Movie;\n","import React from 'react';\n\nimport Movie from './Movie';\nimport classes from './MoviesList.module.css';\n\nconst MovieList = (props) => {\n  return (\n    <ul className={classes['movies-list']}>\n      {props.movies.map((movie) => (\n        <Movie\n          key={movie.id}\n          title={movie.title}\n          releaseDate={movie.release}\n          openingText={movie.openingText}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default MovieList;\n","import React, { useRef } from 'react';\n\nimport classes from './AddMovie.module.css';\n\nfunction AddMovie(props) {\n  const titleRef = useRef('');\n  const openingTextRef = useRef('');\n  const releaseDateRef = useRef('');\n\n  function submitHandler(event) {\n    event.preventDefault();\n\n    // could add validation here...\n\n    const movie = {\n      title: titleRef.current.value,\n      openingText: openingTextRef.current.value,\n      releaseDate: releaseDateRef.current.value,\n    };\n\n    props.onAddMovie(movie);\n  }\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div className={classes.control}>\n        <label htmlFor='title'>Title</label>\n        <input type='text' id='title' ref={titleRef} />\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='opening-text'>Opening Text</label>\n        <textarea rows='5' id='opening-text' ref={openingTextRef}></textarea>\n      </div>\n      <div className={classes.control}>\n        <label htmlFor='date'>Release Date</label>\n        <input type='text' id='date' ref={releaseDateRef} />\n      </div>\n      <button>Add Movie</button>\n    </form>\n  );\n}\n\nexport default AddMovie;\n","import React, { useState, useEffect, useCallback } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [movies, setMovies] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [newMovie, setNewMovie] = useState(false);\n\n  const fetchMoviesHandler = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\n        \"https://react-abfeb-default-rtdb.firebaseio.com/movies.json\"\n      );\n      if (!response.ok) {\n        throw new Error(\"Something went wrong!\");\n      }\n\n      const data = await response.json();\n      const loadedData = [];\n\n      for (const key in data) {\n        loadedData.push({\n          id: key,\n          title: data[key].title,\n          openingText: data[key].openingText,\n          releaseDate: data[key].releaseDate\n        });\n      }\n      console.log(loadedData);\n\n      setMovies(loadedData);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n\n  useEffect(() => {\n    fetchMoviesHandler();\n  }, [fetchMoviesHandler, newMovie]);\n\n  async function addMovieHandler(movie) {\n    setNewMovie(!newMovie);\n    const res = await fetch(\n      \"https://react-abfeb-default-rtdb.firebaseio.com/movies.json\",\n      {\n        method: \"POST\",\n        body: JSON.stringify(movie)\n      }\n    );\n    const data = await res.json();\n    console.log(data);\n  }\n\n  let content = <p>Found no movies.</p>;\n\n  if (movies.length > 0) {\n    content = <MoviesList movies={movies} />;\n  }\n\n  if (error) {\n    content = <p>{error}</p>;\n  }\n\n  if (isLoading) {\n    content = <p>Loading...</p>;\n  }\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={fetchMoviesHandler}>Fetch Movies</button>\n      </section>\n      <section>{content}</section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<App />);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"control\":\"AddMovie_control__2ENNX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movie\":\"Movie_movie__27rBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"movies-list\":\"MoviesList_movies-list__lMnXQ\"};"],"sourceRoot":""}